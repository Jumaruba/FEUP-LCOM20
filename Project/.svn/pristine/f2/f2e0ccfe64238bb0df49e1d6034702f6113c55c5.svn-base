// IMPORTANT: you must include the following line in all your C files
#include <minix/driver.h>
#include <lcom/lcf.h>
#include <lcom/lab5.h>
#include <stdint.h>
#include <sys/mman.h>
#include <stdio.h>
#include "lcom/pixmap.h"
#include "vbe.h"
#include "graphic.h"
#include "sprite.h"
#include "keyboard.h"
#include "i8042.h"

#ifndef _PROJ_H_
#define _PROJ_H_


// Any header files included below this line should have been created by you
int XBOUND=100000;
int YBOUND=100000;
extern uint8_t data; 
extern int contador;

int main(int argc, char *argv[]) {
  // sets the language of LCF messages (can be either EN-US or PT-PT)
  lcf_set_language("EN-US");

  // enables to log function invocations that are being "wrapped" by LCF
  // [comment this out if you don't want/need it]
  lcf_trace_calls("/home/lcom/labs/Project/trace.txt");

  // enables to save the output of printf function calls on a file
  // [comment this out if you don't want/need it]
  lcf_log_output("/home/lcom/labs/Project/output.txt");

  // handles control over to LCF
  // [LCF handles command line arguments and invokes the right function]
  if (lcf_start(argc, argv))
    return 1;

  // LCF clean up tasks
  // [must be the last statement before return]
  lcf_cleanup();

  return 0;
}

int proj_begin(int argc, char *argv[]){
  printEndGame(1); 
  return 0; 
}
int(video_test_init)(uint16_t mode, uint8_t delay) {

  //getPermission();
  if (init_mode(mode)) return 1; 
  sleep(delay); 
  if (vg_exit()) return 1; 

  return 0;
}

int(video_test_xpm)(xpm_map_t xpm, uint16_t x, uint16_t y) {
  uint8_t *mem_video; 
  mem_video = vg_init(INDEX_MODE);
  
  if (mem_video == NULL) return 1;  
  
  drawXpm(xpm, x, y); 
  message msg; 
  int r; 
  int ipc_status; 
  uint8_t irq_set; 
  

  if(keyboard_subscribe(&irq_set) != 0) return 1;                 //interrupt upon keyboard use

  while( data != KBC_KC_ESC) { 
    if ( (r = driver_receive(ANY, &msg, &ipc_status)) != 0 ) { 
      continue;
    }
    if (is_ipc_notify(ipc_status)) { 
      switch (_ENDPOINT_P(msg.m_source)) {
        case HARDWARE:        
          if (msg.m_notify.interrupts & irq_set) { 
            keyboard_handler();
          }
        break;
        default:
          break;  
      }
    } else{ 
      continue;
    }
  }
  
  if(keyboard_unsubscribe()) return 1;    
  if(vg_exit()) return 1; 
  
  return 0; 
}
#endif

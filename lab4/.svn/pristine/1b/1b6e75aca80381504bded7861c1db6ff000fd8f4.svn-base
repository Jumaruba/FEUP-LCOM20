// IMPORTANT: you must include the following line in all your C files
#include <lcom/lcf.h>

#include <lcom/lab3.h>
#include <stdio.h>
#include <stdbool.h>
#include <stdint.h>
#include <minix/syslib.h>

#include "mouse.h"
#include "i8254.h"
#include "i8042.h"

// Any header files included below this line should have been created by you


extern int mouse_hook_id; 
extern uint8_t data; 
extern uint32_t countByte; 
extern uint8_t bytes[3]; 

int main(int argc, char *argv[]) {
  // sets the language of LCF messages (can be either EN-US or PT-PT)
  lcf_set_language("EN-US");

  // enables to log function invocations that are being "wrapped" by LCF
  // [comment this out if you don't want/need/ it]
  lcf_trace_calls("/home/lcom/labs/lab4/trace.txt");

  // enables to save the output of printf function calls on a file
  // [comment this out if you don't want/need it]
  lcf_log_output("/home/lcom/labs/lab4/output.txt");

  // handles control over to LCF
  // [LCF handles command line arguments and invokes the right function]
  if (lcf_start(argc, argv))
    return 1;

  // LCF clean up tasks
  // [must be the last statement before return]
  lcf_cleanup();

  return 0;
}


int (mouse_test_packet)(uint32_t cnt) {
    struct packet pp; 
    int ipc_status;
    message msg;
    int r; 
    uint8_t irq_set = 12; 


    mouse_issueCommand(ENA_REP);        //remote mode
    if(mouse_subscribe(&irq_set) != 0 ) return 1; 

    while( cnt*3 > 0 ) { 
      if( (r = driver_receive(ANY, &msg, &ipc_status)) != 0 ) {
        printf("driver_receive failed with: %d", r);
        continue;
      }
    if (is_ipc_notify(ipc_status)) { 
      //NAO ENTRA AQUI 
      switch (_ENDPOINT_P(msg.m_source)) {
        case HARDWARE: 
          if (msg.m_notify.interrupts & irq_set) {
            mouse_ih(); 
            syncPacks(&countByte); 
            countByte++; 
            if (countByte == 3){
              countByte = 0; 
              cnt--; 
              parseBytes(&pp); 
              mouse_print_packet(&pp); 
            }
          }
          break;
          default:
          break; 
        }
      } else { 
      }
    }
    mouse_issueCommand(DIS_REP); 
    if(mouse_unsubscribe()!= 0) return 1; 
    return 0; 
}

int (mouse_test_remote)(uint16_t period, uint8_t cnt) {
    /* To be completed */
    printf("%s(%u, %u): under construction\n", __func__, period, cnt);
    return 1;
}

int (mouse_test_async)(uint8_t idle_time) {
    /* To be completed */
    printf("%s(%u): under construction\n", __func__, idle_time);
    return 1;
}

int (mouse_test_gesture)(uint8_t x_len, uint8_t tolerance) {
    /* To be completed */
    printf("%s: under construction\n", __func__);
    return 1;
}

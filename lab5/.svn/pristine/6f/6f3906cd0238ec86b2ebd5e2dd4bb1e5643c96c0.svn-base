
#include "graphic.h"
#include "vbe.h"


//Uses the VBE INT 0x10 interface to set the desired graphics mode using a linear frame buffer, 
//maps VRAM to the process' address space
//initializes static global variables with the resolution of the screen, and the color depth (i.e the no. of bits per pixel). 
//Initially, you should call function vbe_get_mode_info() provided by the LCF, to get this information. Later, you can implement 
//your own version of this function.


static uint16_t hres; 
static uint16_t vres; 
static uint8_t bits_per_pixel; 
static uint8_t *video_mem; 
static uint8_t bytes; 
static uint8_t RedScreenMask; 
static uint8_t GreenScreenMask; 
static uint8_t BlueScreenMask; 

void getPermission() {

    int r;
    struct minix_mem_range mr; 
    mr.mr_base = (phys_bytes) 0x0;         //getting the base address
    mr.mr_limit = mr.mr_base + 0xFFFFF;    //getting the 1MB (1024*1024)

    //getting permission
    if( OK != (r = sys_privctl(SELF, SYS_PRIV_ADD_MEM, &mr)))
        panic("sys_privctl (ADD_MEM) failed: %d\n", r);

    return;
}

//codigo para a primeira funcao
int init_mode(uint16_t mode){   
    
    reg86_t reg; 
    memset(&reg, 0, sizeof(reg));               // clear unused register to avoid errors 
    reg.ax = VBE_FUNCTION | VBE_SET_MODE;       // VBE call, function 02 -- set VBE mode
    reg.bx = BIT(14) | mode;                    // set bit 14: linear framebuffer
    reg.intno = INT;                   
    
    //sending info to the bios
    if( sys_int86(&reg) != OK) {
        printf("set_vbe_mode: sys_int86() failed \n");
        return 1;
    }
    return 0; 
}

void *(vg_init)(uint16_t mode){

    getPermission();

    vbe_mode_info_t mode_info;
    if(vbeModeInfo(mode, &mode_info)) return NULL;                  //getting mode

    hres = mode_info.XResolution;                                   //setting static variables
    vres = mode_info.YResolution; 
    bits_per_pixel = mode_info.BitsPerPixel; 
    GreenScreenMask = mode_info.GreenMaskSize;                      //get mask size 
    BlueScreenMask = mode_info.BlueMaskSize; 
    RedScreenMask = mode_info.RedMaskSize; 
    bytes = ceil(bits_per_pixel/8.0); 

    int r = 0;
    struct minix_mem_range mr;
    unsigned int vram_size = hres*vres* ceil(bits_per_pixel/8.0);   //size of the ram
    mr.mr_base = (phys_bytes)  mode_info.PhysBasePtr;               //getting the base address
    mr.mr_limit = mr.mr_base + vram_size;                           //getting the limit
    if( OK != (r = sys_privctl(SELF, SYS_PRIV_ADD_MEM, &mr)))       //getting permission
        panic("sys_privctl (ADD_MEM) failed: %d\n", r);

    video_mem = vm_map_phys(SELF, (void *) mr.mr_base, vram_size);  //mapping memory to get the first MB
    if(video_mem == MAP_FAILED) panic("couldn't map video memory"); //case of error

    if(init_mode(mode))
        return NULL;

    return video_mem; 
}

//obtain physical memory address 
int vbeModeInfo(uint16_t mode, vbe_mode_info_t *mode_info){
  
    reg86_t reg; 
    mmap_t info_map;
    //use liblm.a to initialize 
    //initialize low memory    
    
    //if(lm_init(true) == NULL) return 1;
    if(lm_alloc(sizeof(vbe_mode_info_t), &info_map) == NULL ) return 1; 

    phys_bytes buf; 
    buf = info_map.phys;                                            //buffer in that region of the physical address space.

    //es and ds describes general characteristics 
    // clear unused register to avoid errors 
    memset(&reg, 0, sizeof(reg));
    reg.ax = VBE_FUNCTION | VBE_MODE_INFO;                          //function call | mode info
    reg.es =  PB2BASE(buf);
    reg.di = PB2OFF(buf);
    reg.cx = mode; 
    reg.intno = INT;
    if( sys_int86(&reg) != OK )return 1;                            //sending information to the bios 
    
    //como passar a informação para mode_info 
    *mode_info = *((vbe_mode_info_t *)(info_map.virt)); 
    if (!lm_free(&info_map)) return 1;                              //freeing space
    return 0; 

}

int (vg_draw_rectangle)(uint16_t x, uint16_t y,uint16_t width, uint16_t height, uint32_t color){
    while(height > 0){
        vg_draw_hline(x, y, width, color); 
        height--; 
        y++; 
    }
    return 0; 
}

int (vg_draw_hline)(uint16_t x, uint16_t y, uint16_t len ,uint32_t color ){
    while(len>0){
        drawPixel(x, y, color); 
        len--;
        x++; 
    }
    return 0; 
} 
int drawPixel(uint16_t x, uint16_t y, uint32_t color){          
    memcpy(&video_mem[((y*hres)+x)*bytes], &color, bytes); 
    return 0; 
}


uint16_t get_hres(){
    return hres; 
}
uint16_t get_vres(){
    return vres; 
}
uint16_t get_RedScreenMask(){
    return RedScreenMask;
}
uint16_t get_BlueScreenMask(){
    return BlueScreenMask; 
}
uint16_t get_GreenScreenMask(){
    return GreenScreenMask; 
}

uint8_t get_bits_per_pixel(){   
    return bits_per_pixel;
}

uint8_t get_bytes(){
    return bytes; 
}
void drawXpm(xpm_map_t xpm, uint16_t x, uint16_t y){
    xpm_image_t img;
    // get the pix map from the XPM
    uint8_t *sprite = xpm_load(xpm, XPM_INDEXED, &img);

    // copy it to graphics memory
    for (int linha = 0; linha < img.height; linha++){
        for (int coluna = 0; coluna < img.width; coluna++){
        drawPixel(x+coluna, y+linha, sprite[coluna + linha*img.width]);  
        }
    }

}
int getControllerInfo(VbeInfoBlock  *controller_info, uint32_t *base){
    reg86_t reg; 
    mmap_t info; 

    controller_info->VbeSignature[0]= 'V';
    controller_info->VbeSignature[1]= 'B';
    controller_info->VbeSignature[2]= 'E';
    controller_info->VbeSignature[3]= '2';

    //getPermission(); 
    //lm_init(true); 

    if(lm_alloc(sizeof(VbeInfoBlock), &info) == NULL ) return 1;
    *base = info.phys; 

    phys_bytes buf; 
    buf = info.phys;                                            //buffer in that region of the physical address space.


    memset(&reg, 0, sizeof(reg));                                   //cleaning memset

    reg.ax = VBE_FUNCTION | CTRL_INFO;                              //function call | mode info
    reg.es =  PB2BASE(buf);
    reg.di = PB2OFF(buf);
    reg.intno = INT;
    if( sys_int86(&reg) != OK )return 1;                            //sending information to the bios 
    
    

    //como passar a informação para mode_info 
    controller_info = ((VbeInfoBlock  *)(info.virt)); 
    if (!lm_free(&info)) return 1;                              //freeing space
    return 0; 




}
int get_controller(){
    
    VbeInfoBlock  controller_info; 
    vg_vbe_contr_info_t* ctrl = NULL; 
    uint32_t base_address; 
    getPermission(); 
    if(getControllerInfo(&controller_info, &base_address)) return 1; 

    ctrl->VBESignature[0] = controller_info.VbeSignature[0];
    ctrl->VBESignature[1] = controller_info.VbeSignature[1]; 
    ctrl->VBESignature[2] = controller_info.VbeSignature[2]; 
    ctrl->VBESignature[3] = controller_info.VbeSignature[3]; 
    ctrl->VBEVersion[0] = controller_info.VbeVersion[0]; 
    ctrl->VBEVersion[1] = controller_info.VbeVersion[1]; 
    ctrl->OEMString = (char*)(((controller_info.OemStringPtr >> 16) << 4) + (controller_info.OemStringPtr & OFFSET) + base_address); 
    ctrl->VideoModeList = (uint16_t *)(((controller_info.VideoModePtr >> 16) << 4) + (controller_info.VideoModePtr & OFFSET) + base_address);
    ctrl->TotalMemory = (controller_info.TotalMemory * 64);     //hm
    ctrl->OEMVendorNamePtr =(char*)(((controller_info.OemVendorNamePtr >> 16) << 4) + (controller_info.OemVendorNamePtr & OFFSET) + base_address) ;
    ctrl->OEMProductNamePtr = (char*)(((controller_info.OemProductNamePtr >> 16) << 4) + (controller_info.OemProductNamePtr & OFFSET) + base_address);
    ctrl->OEMProductRevPtr = (char*)(((controller_info.OemProductRevPtr >> 16) << 4 )+ (controller_info.OemProductRevPtr & OFFSET) + base_address);
    
    vg_display_vbe_contr_info(ctrl); 
    return 0; 
}

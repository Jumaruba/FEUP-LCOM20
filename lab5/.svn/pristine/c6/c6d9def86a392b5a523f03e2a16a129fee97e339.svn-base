// IMPORTANT: you must include the following line in all your C files
#include <minix/driver.h>
#include <lcom/lcf.h>
#include <lcom/lab5.h>
#include <stdint.h>
#include <sys/mman.h>
#include <stdio.h>
#include "lcom/pixmap.h"
#include "vbe.h"
#include "graphic.h"
#include "keyboard.h"
#include "i8042.h"

// Any header files included below this line should have been created by you

extern uint8_t data; 

int main(int argc, char *argv[]) {
  // sets the language of LCF messages (can be either EN-US or PT-PT)
  lcf_set_language("EN-US");

  // enables to log function invocations that are being "wrapped" by LCF
  // [comment this out if you don't want/need it]
  lcf_trace_calls("/home/lcom/labs/lab5/trace.txt");

  // enables to save the output of printf function calls on a file
  // [comment this out if you don't want/need it]
  lcf_log_output("/home/lcom/labs/lab5/output.txt");

  // handles control over to LCF
  // [LCF handles command line arguments and invokes the right function]
  if (lcf_start(argc, argv))
    return 1;

  // LCF clean up tasks
  // [must be the last statement before return]
  lcf_cleanup();

  return 0;
}

int(video_test_init)(uint16_t mode, uint8_t delay) {

  getPermission();
  if (init_mode(mode)) return 1; 
  sleep(delay); 
  if (vg_exit()) return 1; 

  return 0;
}

int(video_test_rectangle)(uint16_t mode, uint16_t x, uint16_t y,
                          uint16_t width, uint16_t height, uint32_t color) {
  

  if (vg_init(mode) == NULL) return 1; 
  
  vg_draw_rectangle(x, y, width, height, color);                  //draw the rectangle 
  
  message msg; 
  int r; 
  int ipc_status; 
  uint8_t irq_set; 
  

  if(keyboard_subscribe(&irq_set) != 0) return 1;                 //interrupt upon keyboard use

  while( data != KBC_KC_ESC) { 
    if ( (r = driver_receive(ANY, &msg, &ipc_status)) != 0 ) { 
      continue;
    }
    if (is_ipc_notify(ipc_status)) { 
      switch (_ENDPOINT_P(msg.m_source)) {
        case HARDWARE:        
          if (msg.m_notify.interrupts & irq_set) { 
            keyboard_handler();
          }
        break;
        default:
          break;  
      }
    } else{ 
      continue;
    }
  }
  
  if(keyboard_unsubscribe()) return 1;    
  if(vg_exit()) return 1; 
  return 0;
}

int(video_test_pattern)(uint16_t mode, uint8_t no_rectangles, uint32_t first, uint8_t step) {
  message msg; 
  int r; 
  int ipc_status; 
  uint8_t irq_set; 

  if (!vg_init(mode)) return 1; 

  uint16_t width = get_hres()/no_rectangles; 
  uint16_t height = get_vres()/no_rectangles; 
  uint16_t x_pos, y_pos; 
  uint32_t color, col, row; 
  x_pos = 0; 
  y_pos = 0; 
  col = 0; 
  row = 0; 

  while(col < no_rectangles){
    while (row < no_rectangles){
      if (mode == INDEX_MODE)
        color = (first + (row * no_rectangles + col) * step) & (1<< get_bits_per_pixel()); 
      else{
        color = (first&0x11 + col*step) % (1<< get_RedScreenMask()); 
        color+= (first& 0x1100 + col*step) % (1<< get_GreenScreenMask()); 
        color+= (first&0x110000 + col*step) % (1 << get_BlueScreenMask()); 
      }
      vg_draw_rectangle(x_pos,y_pos,width, height, color);
      y_pos += height; 
      row++; 

    }
    x_pos += width; 
    col++; 
    row = 0;  
  }
   
  if(keyboard_subscribe(&irq_set) != 0) return 1;                 //interrupt upon keyboard use

  while( data != KBC_KC_ESC) { 
    if ( (r = driver_receive(ANY, &msg, &ipc_status)) != 0 ) { 
      continue;
    }
    if (is_ipc_notify(ipc_status)) { 
      switch (_ENDPOINT_P(msg.m_source)) {
        case HARDWARE:        
          if (msg.m_notify.interrupts & irq_set) { 
            keyboard_handler();
          }
        break;
        default:
          break;  
      }
    } else{ 
      continue;
    }
  }
  
  if(keyboard_unsubscribe()) return 1;    
  if(vg_exit()) return 1; 
  return 0;
}

int(video_test_xpm)(xpm_map_t xpm, uint16_t x, uint16_t y) {
  /* To be completed */
  printf("%s(%8p, %u, %u): under construction\n", __func__, xpm, x, y);

  return 1;
}

int(video_test_move)(xpm_map_t xpm, uint16_t xi, uint16_t yi, uint16_t xf, uint16_t yf,
                     int16_t speed, uint8_t fr_rate) {
  /* To be completed */
  printf("%s(%8p, %u, %u, %u, %u, %d, %u): under construction\n",
         __func__, xpm, xi, yi, xf, yf, speed, fr_rate);

  return 1;
}

int(video_test_controller)() {
  /* To be completed */
  printf("%s(): under construction\n", __func__);

  return 1;
}
